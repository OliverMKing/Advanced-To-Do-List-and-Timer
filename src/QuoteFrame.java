
import java.util.ArrayList;
import java.util.Collections;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

/**
 * Displays a quote
 * @author Oliver King
 */
public class QuoteFrame extends javax.swing.JFrame {

    
    private ArrayList<String> properQuotes = new ArrayList<String>();
    
    /**
     * Creates QuoteFrame
     */
    public QuoteFrame() {
        initComponents();
        
        // Retrieves quotes from internet and stores them in properQuotes
	Document document;
	try {
            document = Jsoup.connect("https://www.dailyinspirationalquotes.in/").get();           
            Elements quotes = document.select(".td-excerpt");

            for (int i=0; i < quotes.size(); i++) {
                if(!(quotes.get(i).text().contains("...")))
                    properQuotes.add((quotes.get(i).text().substring(0, quotes.get(i).text().length()-10)));
            }

            reloadQuote();

        } catch (Exception e) {
            properQuotes.add("You must be connected to the internet to use this feature.");
	}
        
            reloadQuote();
	}

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        quoteTextPane = new javax.swing.JTextPane();
        reloadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quote");

        jScrollPane1.setBorder(null);

        quoteTextPane.setEditable(false);
        quoteTextPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        quoteTextPane.setFont(new java.awt.Font("Verdana", 0, 13)); // NOI18N
        jScrollPane1.setViewportView(quoteTextPane);

        reloadButton.setText("â†» ");
        reloadButton.setFocusPainted(false);
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(reloadButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reloadButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Selects a new quote if possible
     * @param evt 
     */
    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        String current = "";
        
        if(properQuotes.size() > 1)
            current = quoteTextPane.getText();
                
        while(true) {
            reloadQuote();
        
            if (!(quoteTextPane.getText().equals(current)))
                break;
        }
    }//GEN-LAST:event_reloadButtonActionPerformed

    /**
     * Gets a new quote
     */
    public void reloadQuote() {
        Collections.shuffle(properQuotes);        
        quoteTextPane.setText(properQuotes.get(0));        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane quoteTextPane;
    private javax.swing.JButton reloadButton;
    // End of variables declaration//GEN-END:variables
}
